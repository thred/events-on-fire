#summary events-on-fire overview

= Overview =

== Features ==

  * *Asynchronous event handling* - all events will be handled by a dedicated thread.
  * *Automatic cleanup* - there is no need to unbind consumers. All links between producers and consumers will be cleaned by the garbage collector.
  * *No configuration needed* - everything works out of the box. Just bind and fire.
  * *Multiple handleEvents methods* - a class may contain many handleEvents methods, the right one is called at runtime
  * *Firing of events can be disabled per-thread*
  * *High-performance* - designed with performance in mind. Speed up you applications by spreading the work over multiple threads.

== Scenarios ==

  * *Swing* - fire messages across your application without the need of implementing the listener pattern ever again. Plus, your GUI will keep responsive without the need of implementing a SwingWorker.
  * *Web-Applications* - shift work to the background, without blocking the request.
  * *Business Logic* - Break your business logic into many small parts and communicate by asynchronous events.

= Usage =

== Include the library ==

=== Include events-on-fire manually ===

Download the latest release: http://...

Add the jar manually.

=== Include events-on-fire via Maven ===

Add the following dependency:

{{{
<dependency>
  <groupId>com.google.code.events-on-fire</groupId>
  <artifactId>events-on-fire</artifactId>
  <version>1.0</version>
</dependency>
}}}

== Basic example ==

You can use any object as event. Usually you create a class that holds all the stuff you need for handling the event, but it may be enough to use a String. 
 
=== Create a consumer (your listener) ===

Add a handleEvent method to you class:

{{{
public class MyClass {
  ...
  public void handleEvent(String event) {
    // handle the event
    ...
  }
  ...
}
}}}

=== Bind the consumer to a producer ===

{{{
Events.bind(producer, consumer);
}}}

The producer usually is your controller. In Swing this may be your Frame or a Component. In Web-Applications this may be the instance of a service. 

The consumer is the class with the handleEvent method. Keep in mind, that you have to handle the instance of the consumer. The references in the Events class are weak. If there is no reference left, the consumer will get cleaned up by the garbage collector.

=== Fire the event ===

{{{
Events.fire(producer, "some event");
}}}

Immediately all the event handlers of the consumers, which are bound to the producer will get called. The consumer will only get called, if it has a event handler method that fits the event. 