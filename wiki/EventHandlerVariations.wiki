#summary Describes variations of the event handler method.

= Introduction =

In events-on-fire the event handling is based on an annotations instead of an interface. This allows different types of method signatures.

= Annotations =

Currently events-on-fire supports three different annotations:
  * *`@EventHandler`*, the default one, the handler is called by the global event handler thread
  * *`@PooledEventHandler`*, when triggered, the handler is executed by a thread pool= Parameters of the Annotation =
The @EventHandler annotation has three parameters: producer, event and pooled. 

== Producer ==

Defines one or more classes to be allowed as producer. 


...TBD...
  * *`@SwingEventHandler`*, calls the handler using the Swing event thread (`SwingUtilities.invokeLater(...)`)

All these annotations support following parameters:
  * producer: one or more classes of supported producers. Usually optional, but a consumer may be bound to multiple producers.
  * event: one or more classes of supported events. Usually optional, because this is defined by the events-parameter of the method.
  * eachTag: optional, each of the specified tags must be present when the fire method was called
  * anyTag: optional, at least one of the specified tags must be present when the fire method was called

= Methods =

TBD